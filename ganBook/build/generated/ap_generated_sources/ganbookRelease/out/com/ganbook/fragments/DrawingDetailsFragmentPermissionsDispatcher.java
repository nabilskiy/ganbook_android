// This file was generated by PermissionsDispatcher. Do not modify!
package com.ganbook.fragments;

import com.ganbook.models.DrawingAnswer;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.GrantableRequest;
import permissions.dispatcher.PermissionUtils;

final class DrawingDetailsFragmentPermissionsDispatcher {
  private static final int REQUEST_SAVEDRAWING = 6;

  private static final String[] PERMISSION_SAVEDRAWING = new String[] {"android.permission.WRITE_EXTERNAL_STORAGE"};

  private static GrantableRequest PENDING_SAVEDRAWING;

  private DrawingDetailsFragmentPermissionsDispatcher() {
  }

  static void saveDrawingWithCheck(DrawingDetailsFragment target, DrawingAnswer drawingAnswer,
      String kidId, String classId, String ganId) {
    if (PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SAVEDRAWING)) {
      target.saveDrawing(drawingAnswer, kidId, classId, ganId);
    } else {
      PENDING_SAVEDRAWING = new SaveDrawingPermissionRequest(target, drawingAnswer, kidId, classId, ganId);
      target.requestPermissions(PERMISSION_SAVEDRAWING, REQUEST_SAVEDRAWING);
    }
  }

  static void onRequestPermissionsResult(DrawingDetailsFragment target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_SAVEDRAWING:
      if (PermissionUtils.getTargetSdkVersion(target.getActivity()) < 23 && !PermissionUtils.hasSelfPermissions(target.getActivity(), PERMISSION_SAVEDRAWING)) {
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        if (PENDING_SAVEDRAWING != null) {
          PENDING_SAVEDRAWING.grant();
        }
      }
      PENDING_SAVEDRAWING = null;
      break;
      default:
      break;
    }
  }

  private static final class SaveDrawingPermissionRequest implements GrantableRequest {
    private final WeakReference<DrawingDetailsFragment> weakTarget;

    private final DrawingAnswer drawingAnswer;

    private final String kidId;

    private final String classId;

    private final String ganId;

    private SaveDrawingPermissionRequest(DrawingDetailsFragment target, DrawingAnswer drawingAnswer,
        String kidId, String classId, String ganId) {
      this.weakTarget = new WeakReference<DrawingDetailsFragment>(target);
      this.drawingAnswer = drawingAnswer;
      this.kidId = kidId;
      this.classId = classId;
      this.ganId = ganId;
    }

    @Override
    public void proceed() {
      DrawingDetailsFragment target = weakTarget.get();
      if (target == null) return;
      target.requestPermissions(PERMISSION_SAVEDRAWING, REQUEST_SAVEDRAWING);
    }

    @Override
    public void cancel() {
    }

    @Override
    public void grant() {
      DrawingDetailsFragment target = weakTarget.get();
      if (target == null) return;
      target.saveDrawing(drawingAnswer, kidId, classId, ganId);
    }
  }
}
