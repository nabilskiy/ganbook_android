// Generated by data binding compiler. Do not edit!
package com.project.ganim.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import com.project.ganim.R;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class FragmentMessagesBinding extends ViewDataBinding {
  @NonNull
  public final ImageView attachment;

  @NonNull
  public final FrameLayout messagesFrame;

  @NonNull
  public final RecyclerView messagesRecycler;

  @NonNull
  public final SwipeRefreshLayout messagesRefresher;

  @NonNull
  public final TextView sendMessageBtn;

  @NonNull
  public final EditText sendMessageEditText;

  @NonNull
  public final RelativeLayout sendMsgPanel;

  @Bindable
  protected boolean mVisibleHint;

  protected FragmentMessagesBinding(Object _bindingComponent, View _root, int _localFieldCount,
      ImageView attachment, FrameLayout messagesFrame, RecyclerView messagesRecycler,
      SwipeRefreshLayout messagesRefresher, TextView sendMessageBtn, EditText sendMessageEditText,
      RelativeLayout sendMsgPanel) {
    super(_bindingComponent, _root, _localFieldCount);
    this.attachment = attachment;
    this.messagesFrame = messagesFrame;
    this.messagesRecycler = messagesRecycler;
    this.messagesRefresher = messagesRefresher;
    this.sendMessageBtn = sendMessageBtn;
    this.sendMessageEditText = sendMessageEditText;
    this.sendMsgPanel = sendMsgPanel;
  }

  public abstract void setVisibleHint(boolean visibleHint);

  public boolean getVisibleHint() {
    return mVisibleHint;
  }

  @NonNull
  public static FragmentMessagesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_messages, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static FragmentMessagesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<FragmentMessagesBinding>inflateInternal(inflater, R.layout.fragment_messages, root, attachToRoot, component);
  }

  @NonNull
  public static FragmentMessagesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.fragment_messages, null, false, component)
   */
  @NonNull
  @Deprecated
  public static FragmentMessagesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<FragmentMessagesBinding>inflateInternal(inflater, R.layout.fragment_messages, null, false, component);
  }

  public static FragmentMessagesBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static FragmentMessagesBinding bind(@NonNull View view, @Nullable Object component) {
    return (FragmentMessagesBinding)bind(component, view, R.layout.fragment_messages);
  }
}
